{"version":3,"sources":["Components/Header/Header.js", "Components/LogInBtn.js", "Components/NavBar/NavBar.js","Components/LogInPage/LogInCard.js","Components/LogInPage/LogInPage.js","Components/StudentCard/StudentCard.js","Components/HomePage/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","LogInBtn","loginWithRedirect","useAuth0","data-toggle","onClick","id","NavBar","href","LogInCard","LogInPage","studentCard","props","data-id","first_name","last_name","grade","detention","role","type","data-target","data-detention","HomePage","StudentCard","App","isAuthenticated","Boolean","window","location","hostname","match","ReactDOM","render","domain","clientId","redirectUri","origin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAeeA,MAbf,WACA,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,6BACX,wBAAIA,UAAU,yBAAd,uBACA,uBAAGA,UAAU,QAAb,gDACA,wBAAIA,UAAU,SACd,wBAAIA,UAAU,wBCIXC,MAVf,WAAqB,IACTC,EAAsBC,cAAtBD,kBACZ,OAEA,yBAAKF,UAAU,6BAA6BI,cAAY,WACpD,4BAAQJ,UAAU,oBAAoBK,QAAS,kBAAMH,KAAqBI,GAAG,WAA7E,eCQWC,MAbf,WACE,OACE,oCACE,yBAAKP,UAAU,2CACb,uBAAGA,UAAU,eAAeQ,KAAK,KAAjC,YAGA,kBAAC,EAAD,SCUOC,MAjBf,WACE,OACE,oCACE,yBAAKT,UAAU,oBACnB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,iBACA,uBAAGA,UAAU,aAAb,8BACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,0BAAf,sBACqB,6BADrB,sBAC6C,6BAD7C,4BCGaU,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCwBaC,MAhCnB,SAAqBC,GACrB,OACA,oCACA,yBAAKC,UAASD,EAAMN,GAAIN,UAAU,sBAC1B,yBAAKA,UAAU,2BACf,wBAAIA,UAAU,gBAAgBY,EAAME,WAApC,IAAiDF,EAAMG,YAGvD,yBAAKf,UAAU,2BAA2BM,GAAG,YAC/C,uBAAGN,UAAU,0BAAb,UAA6C,0BAAMA,UAAU,YAAYY,EAAMI,MAAlC,KAA7C,KAEA,uBAAGhB,UAAU,qBAAb,qBAAmD,6BAAnD,IAAyD,0BAAMA,UAAU,aAAhB,kCAAzD,KAEA,uBAAGA,UAAU,8BAAb,cAAqD,0BAAMA,UAAU,gBAAhB,IAAiCY,EAAMK,WAA5F,MAGA,yBAAKjB,UAAU,uBACf,yBAAKA,UAAU,YAAYkB,KAAK,SAEhC,4BAAQC,KAAK,SAAQnB,UAAU,eAAea,UAASD,EAAMN,GAAIF,cAAY,QAAQgB,cAAY,eAAed,GAAG,QAAnH,QAEA,4BAAQa,KAAK,SAASnB,UAAU,aAAaa,UAASD,EAAMN,GAAIe,iBAAgBT,EAAMK,UAAWX,GAAG,gBAApG,aAEA,4BAAQa,KAAK,SAASnB,UAAU,UAAUM,GAAK,YAAYO,UAASD,EAAMN,IAA1E,eCCWgB,MArBjB,WAGI,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,CACAjB,GAAG,IACHQ,WAAW,SACXC,UAAU,SACVC,MAAM,IACNC,UAAU,KACVZ,QAAS,eAGT,yCCFSmB,MAbf,WAEI,OAD0BrB,cAApBsB,gBAGJ,kBAAC,EAAD,MAIE,kBAAC,EAAD,OCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,CACEC,OAAO,4BACPC,SAAS,mCACTC,YAAaR,OAAOC,SAASQ,QAE7B,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5e34d5f6.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\nreturn (\n    <div className=\"jumbotron\">\n        <div className=\"jumbo-content text-center\">\n            <h1 className=\"display-4 text-center\">Welcome to Pantheos</h1>\n            <p className=\"lead\">Track your students, control your classroom.</p>\n            <hr className=\"my-4\" />\n            <h3 className=\"quote text-white\"></h3>\n        </div>\n    </div>\n)\n}\n\nexport default Header;","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nfunction LogInBtn() {\n    const { loginWithRedirect } = useAuth0();\nreturn (\n\n<div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n    <button className=\"btn btn-secondary\" onClick={() => loginWithRedirect()} id=\"option1\"> Sign In </button>\n</div>\n)\n}\n\nexport default LogInBtn;","import React from \"react\";\nimport LogInBtn from \"../LogInBtn\";\n\nfunction NavBar() {\n  return (\n    <>\n      <nav className=\"navbar sticky-top navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Pantheos\n        </a>\n        <LogInBtn />\n      </nav>\n    </>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport LogInBtn from \"../LogInBtn\"\n\nfunction LogInCard() {\n  return (\n    <>\n      <div className=\"card text-center\">\n  <div className=\"card-body\">\n    <h5 className=\"card-title\">Welcome to...</h5>\n    <p className=\"card-text\">Please Sign In to continue</p>\n    <LogInBtn />\n  </div>\n  <div className=\"card-footer text-muted\">\n    To demo site, use: <br/> Email: sjdhfakdja <br/> Password: shdjfkasdf\n  </div>\n</div>\n    </>\n  );\n}\n\nexport default LogInCard;","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport NavBar from \"../NavBar/NavBar\";\nimport LogInCard from \"./LogInCard\";\n\nfunction LogInPage() {\n  return (\n    <>\n      <NavBar />\n      <Header />\n      <LogInCard />\n    </>\n  );\n}\n\nexport default LogInPage;\n","import React from \"react\"\n\nfunction studentCard(props){\nreturn (\n<>\n<div data-id={props.id} className=\"card mt-3 col-md-4\">\n        <div className=\"card-header text-center\">\n        <h5 className=\"student-name\">{props.first_name} {props.last_name}</h5>\n        </div>\n        {/* //! how to put things in class name */}\n        <div className=\"card-body ${props.grade}\" id=\"cardBody\">\n      <p className=\"card-text studentGrade\">Grade: <span className=\"stuGrade\">{props.grade} </span> </p>\n      {/* //! NEed to figure out teacher name */}\n      <p className=\"card-text teacher\">Homeroom Teacher: <br/> <span className=\"hrTeacher\"> Teacher First + Teacher Last </span> </p>\n      {/* //! {props.detention? \"Yes\" : \"No\"} --> This was in the og thing, maybe put it in the call instead */}\n      <p className=\"card-text studentDetention\">Detention: <span className=\"hasDetention\"> {props.detention}</span> </p> \n      </div>\n\n      <div className=\"card-footer mx-auto\">\n      <div className=\"btn-group\" role=\"group\">\n\n      <button type=\"button\"className=\"btn darkblue\" data-id={props.id} data-toggle=\"modal\" data-target=\"#updateModal\" id=\"edit\">Edit</button>\n\n      <button type=\"button\" className=\"btn yellow\" data-id={props.id} data-detention={props.detention} id=\"detentionBtn\">Detention</button>\n\n      <button type=\"button\" className=\"btn red\" id = \"deleteBtn\" data-id={props.id}>Delete</button>\n      </div>\n\n      </div>\n      </div>\n      </>\n)\n    }\n\n    export default studentCard;","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport NavBar from \"../NavBar/NavBar\";\nimport StudentCard from \"../StudentCard/StudentCard\";\n\nfunction HomePage() {\n\n  \n    return (\n      <>\n      <NavBar />\n      <Header />\n      <StudentCard \n      id=\"6\"\n      first_name=\"Ashley\"\n      last_name=\"Bernal\"\n      grade=\"8\"\n      detention=\"No\"\n      onClick={() => {}}\n      />\n\n      <p>HOMEPAGE</p>\n      </>\n    );\n  }\n  \n  export default HomePage;","import React from 'react';\nimport './App.css';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LogInPage from \"./Components/LogInPage/LogInPage\";\nimport HomePage from \"./Components/HomePage/HomePage\";\n\nfunction App() {\n  const { isAuthenticated } = useAuth0();\n    if (isAuthenticated) {\n      return (\n      <HomePage />\n      )\n    } else{\n      return (\n        <LogInPage />\n        )\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nReactDOM.render(\n  <Auth0Provider\n    domain=\"dev-5emoha6c.us.auth0.com\"\n    clientId=\"E4otJPmqzSfnPoJqcSIVyQnQgG14rClI\"\n    redirectUri={window.location.origin}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}